<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:task="http://www.springframework.org/schema/task" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">  
 
 
     <!-- 引入redis属性配置文件 -->
    <import resource="classpath:/redis-context.xml"/>
    
    
    <!-- 数据源定义 -->    
<!--     <bean id="propertyConfigurer"    
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="locations">    
            <list>    
        <value>classpath:redis.properties</value>  
            </list>    
        </property>    
    </bean>   -->
    <!-- redis数据源 -->  
<!--     <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxTotal" value="${redis.maxActive}" />  
        <property name="maxWaitMillis" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>   -->
    <!-- Spring-redis连接池管理工厂 -->  
<!--     <bean id="jedisConnectionFactory"  
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  
        p:pool-config-ref="poolConfig" />   -->
    
    
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <!-- <context:component-scan base-package="com.ssm.api.controller" /> -->  
    <!-- 设置默认配置方案    配置了这个才能使用@Controller注解-->
	<mvc:annotation-driven/>
	<!-- 使用默认的Servlet来响应静态文件 -->
	<mvc:default-servlet-handler/>
	<!-- swagger使用 -->
	<mvc:default-servlet-handler />
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean>  
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>  
      
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>  
    
    <!-- 自动扫描,扫描到的包下才能使用Service,Controller等注解 -->  
    <context:component-scan base-package="com.ssm.api" />  
    
    <!-- 定时任务 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/> 
    
    <bean class="com.ssm.api.extension.OneMinTask"></bean> 
    
    <!-- 拦截器，使用com.ssm.api.extension.Myinter这个拦截器拦截所有 /api/v1 的请求 -->
    <!-- <mvc:interceptors>
    	使用com.ssm.api.extension.Myinter这个拦截器拦截所有请求
    	<bean class="com.ssm.api.extension.Myinter"></bean>
    	<mvc:interceptor>
    		<mvc:mapping path="/api/v1/**"/>
    		<bean class="com.ssm.api.extension.Myinter"></bean>
    	</mvc:interceptor>
    </mvc:interceptors> -->
    
     <!--定义solr的server-->
   <bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
       <constructor-arg index="0" value="http://127.0.0.1:8888/solr/goods"/>
       <!-- 设置响应解析器 -->
       <property name="parser">
           <bean class="org.apache.solr.client.solrj.impl.XMLResponseParser"/>
       </property>
       <!-- 设置重试次数-->
       <property name="maxRetries" value="1"/>
       <!-- 建立连接的最长时间 -->
       <property name="connectionTimeout" value="500"/>
   </bean>
   
   	<!--  事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
    
     <!-- MyBatis配置 -->
   <!--  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="masterDataSource" />
        自动扫描entity目录, 省掉Configuration.xml里的手工配置
        <property name="typeAliasesPackage" value="com.ssm.api.bean" />
        <property name="configLocation" value="classpath:/spring-mybatis.xml" />
        显式指定Mapper文件位置
        <property name="mapperLocations" value="classpath:/mapping/*Mapper.xml" />
    </bean> -->
</beans>